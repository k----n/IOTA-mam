"""
Django settings for sshkm project.

Generated by 'django-admin startproject' using Django 1.8.14.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

##### CUSTOM
#from ConfigParser import RawConfigParser
#config = RawConfigParser()
#config.read('/etc/sshkm.ini')
#LOGIN_URL = config.get('global', 'LOGIN_URL')
#####

##### CUSTOM
# messaging for bootstrap
from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.ERROR: 'danger'
}
#####

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '7bdm)t)-_)=t18z57u-jbfc3%e=p!go9*h_92l08=nvkf!=9nm'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
##### CUSTOM
    'bootstrap3',
    'menu',
    'authentication',
    'keymaster',
#####
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'sshkm.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
##### CUSTOM
#                'django.core.context_processors.request',
#####
            ],
        },
    },
]

WSGI_APPLICATION = 'sshkm.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#    }
#}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

##### CUSTOM
STATIC_URL = '/keymaster/static/'
#####


##### CUSTOM
LOGIN_URL = '/authentication/login/'
#####



##### CUSTOM
BOOTSTRAP3 = {
    'javascript_in_head': True,
    'required_css_class': 'bootstrap3-req',
    'error_css_class': 'bootstrap3-err',
    'success_css_class': 'bootstrap3-bound',
}
#####


##### CUSTOM
# import config file from /etc
#execfile('/etc/sshkm/sshkm.conf')
exec(compile(open('/etc/sshkm/sshkm.conf', "rb").read(), '/etc/sshkm/sshkm.conf', 'exec'))
#####


##### CUSTOM
#import ldap
#from django_auth_ldap.config import LDAPSearch, GroupOfNamesType

## Baseline configuration.
#AUTH_LDAP_SERVER_URI = "ldap://lb-ldap.herold.intra"

#AUTH_LDAP_BIND_DN = "CN=ldap.keymaster,OU=Service Accounts,OU=Benutzer,DC=herold,DC=intra"
#AUTH_LDAP_BIND_PASSWORD = "chei4oophae8Ahqu"
#AUTH_LDAP_USER_SEARCH = LDAPSearch("OU=Herold,OU=Benutzer,DC=herold,DC=intra",
#    ldap.SCOPE_SUBTREE, "(uid=%(user)s)")
## or perhaps:
## AUTH_LDAP_USER_DN_TEMPLATE = "uid=%(user)s,ou=users,dc=example,dc=com"

## Set up the basic group parameters.
#AUTH_LDAP_GROUP_SEARCH = LDAPSearch("OU=Globale Gruppen - GG,OU=Herold,OU=Gruppen,DC=herold,DC=intra",
#    ldap.SCOPE_SUBTREE, "(objectClass=groupOfNames)"
#)
#AUTH_LDAP_GROUP_TYPE = GroupOfNamesType()

## Simple group restrictions
##AUTH_LDAP_REQUIRE_GROUP = "cn=enabled,ou=django,ou=groups,dc=example,dc=com"
##AUTH_LDAP_DENY_GROUP = "cn=disabled,ou=django,ou=groups,dc=example,dc=com"

## Populate the Django user from the LDAP directory.
#AUTH_LDAP_USER_ATTR_MAP = {
#    "first_name": "givenName",
#    "last_name": "sn",
#    "email": "mail"
#}

#AUTH_LDAP_USER_FLAGS_BY_GROUP = {
#    "is_active": "CN=keymaster-admin-gg,OU=keymaster,OU=Anwendungen,OU=Globale Gruppen - GG,OU=Herold,OU=Gruppen,DC=herold,DC=intra",
#    "is_staff": "CN=keymaster-admin-gg,OU=keymaster,OU=Anwendungen,OU=Globale Gruppen - GG,OU=Herold,OU=Gruppen,DC=herold,DC=intra",
#    "is_superuser": "CN=keymaster-admin-gg,OU=keymaster,OU=Anwendungen,OU=Globale Gruppen - GG,OU=Herold,OU=Gruppen,DC=herold,DC=intra"
#}

## Use LDAP group membership to calculate group permissions.
##AUTH_LDAP_FIND_GROUP_PERMS = True
#AUTH_LDAP_FIND_GROUP_PERMS = False

## Cache group memberships for an hour to minimize LDAP traffic
#AUTH_LDAP_CACHE_GROUPS = False
#AUTH_LDAP_GROUP_CACHE_TIMEOUT = 3600


## Keep ModelBackend around for per-user permissions and maybe a local
## superuser.
#AUTHENTICATION_BACKENDS = (
#    'django_auth_ldap.backend.LDAPBackend',
#    'django.contrib.auth.backends.ModelBackend',
#)
#####

#BROKER_URL = 'amqp://guest:guest@localhost//'
#CELERY_ACCEPT_CONTENT = ['json']
#CELERY_TASK_SERIALIZER = 'json'
#CELERY_RESULT_SERIALIZER = 'json'
#CELERY_BROKER_TRANSPORT = 'amqp'
#CELERY_BROKER_URL = 'amqp://guest@localhost//'
CELERY_BROKER_URL = 'amqp://'
CELERY_RESULT_BACKEND = 'amqp'
#CELERY_RESULT_BACKEND = 'db+sqlite:///results.sqlite'
#CELERY_TASK_PROTOCOL = 1

#CELERY_BROKER_URL = 'amqp://guest:guest@localhost//'

#: Only add pickle to this list if your broker is secured
#: from unwanted access (see userguide/security.html)
#CELERY_ACCEPT_CONTENT = ['json']
#CELERY_RESULT_BACKEND = 'db+sqlite:///results.sqlite'
#CELERY_TASK_SERIALIZER = 'json'
